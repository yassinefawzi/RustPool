mod err;

use std::{error::Error, fs, path::Path};
pub use err::{ParseErr, ReadErr};

use json::{ parse};

#[derive(Debug, Eq, PartialEq)]
pub struct Task {
    pub id: u32,
    pub description: String,
    pub level: u32,
}

#[derive(Debug, Eq, PartialEq)]
pub struct TodoList {
    pub title: String,
    pub tasks: Vec<Task>,
}

impl TodoList {
    pub fn get_todo(path: &str) -> Result<TodoList, Box<dyn Error>> {
        let file_content = fs::read_to_string(Path::new(path))
            .map_err(|e| Box::new(ReadErr { child_err: Box::new(e) }) as Box<dyn Error>)?;

        let parsed = parse(&file_content)
            .map_err(|e| Box::new(ParseErr::Malformed(Box::new(e))) as Box<dyn Error>)?;

        let title = parsed["title"].as_str()
            .ok_or_else(|| Box::new(ParseErr::Malformed("Missing or invalid title".into())) as Box<dyn Error>)?
            .to_string();

        let tasks_array = parsed["tasks"]
    .members()
    .map(|t| {
        let id = t["id"].as_u32().ok_or_else(|| {
            Box::new(ParseErr::Malformed("Invalid id".into())) as Box<dyn Error>
        })?;
        let description = t["description"].as_str().ok_or_else(|| {
            Box::new(ParseErr::Malformed("Invalid description".into())) as Box<dyn Error>
        })?.to_string();
        let level = t["level"].as_u32().ok_or_else(|| {
            Box::new(ParseErr::Malformed("Invalid level".into())) as Box<dyn Error>
        })?;
        Ok(Task { id, description, level })
    })
    .collect::<Result<Vec<_>, Box<dyn Error>>>()?;


        if tasks_array.is_empty() {
            return Err(Box::new(ParseErr::Empty));
        }

        Ok(TodoList {
            title,
            tasks: tasks_array,
        })
    }
}
////////////////////////////////////////////////////

use std::{error::Error, fmt::{self, Display}};

#[derive(Debug)]
pub enum ParseErr {
    Empty,
    Malformed(Box<dyn Error>),
}

impl Display for ParseErr {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		write!(f, "Failed to parse todo file")
	}
}
impl Error for ParseErr {
    fn source(&self) -> Option<&(dyn Error + 'static)> {
        match self {
            ParseErr::Empty => None,
            ParseErr::Malformed(_) => Some(self),
        }
    }
}

#[derive(Debug)]
pub struct ReadErr {
    pub child_err: Box<dyn Error>,
}

impl Display for ReadErr {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "Failed to read todo file")
    }
}

impl Error for ReadErr {
    fn source(&self) -> Option<&(dyn Error + 'static)> {
        Some(self.child_err.as_ref())
    }
}
